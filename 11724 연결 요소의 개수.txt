/*
문제
방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.

출력
첫째 줄에 연결 요소의 개수를 출력한다.
*/
from collections import deque
import sys
input = sys.stdin.readline  # 입력 속도 개선을 위해 sys.stdin.readline 사용

def bfs(start):
    queue = deque([start])  # 큐에 시작 정점을 추가
    visited[start] = True  # 시작 정점을 방문 처리
    while queue:
        v = queue.popleft()  # 큐에서 정점을 꺼내서 처리
        for neighbor in graph[v]:  # 현재 정점에 인접한 모든 정점 확인
            if not visited[neighbor]:  # 방문하지 않은 정점이라면
                visited[neighbor] = True  # 방문 처리
                queue.append(neighbor)  # 큐에 추가하여 다음에 방문

# 입력 받기
N, M = map(int, input().split())
graph = [[] for _ in range(N + 1)]
visited = [False] * (N + 1)

# 간선 정보 입력
for _ in range(M):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)  # 무방향 그래프이므로 양쪽에 간선 추가

# 연결 요소 개수 세기
connected_components = 0
for i in range(1, N + 1):
    if not visited[i]:  # 방문하지 않은 정점이 있으면 새로운 연결 요소
        bfs(i)
        connected_components += 1  # 연결 요소 개수 증가

# 결과 출력
print(connected_components)

