/*
문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.
*/

from collections import deque, defaultdict

def dfs(graph, start, visited_dfs):
    visited_dfs.append(start)  # 현재 정점을 방문 목록에 추가
    for neighbor in sorted(graph[start]):  # 작은 정점부터 방문
        if neighbor not in visited_dfs:
            dfs(graph, neighbor, visited_dfs)  # 재귀적으로 탐색

def bfs(graph, start):
    visited_bfs = []
    queue = deque([start])
    while queue:
        v = queue.popleft()
        if v not in visited_bfs:  # 방문하지 않은 정점이라면
            visited_bfs.append(v)  # 현재 정점을 방문 목록에 추가
            for neighbor in sorted(graph[v]):  # 작은 정점부터 방문
                if neighbor not in visited_bfs:
                    queue.append(neighbor)  # 큐에 추가하여 다음에 방문
    return visited_bfs

# 입력 받기
N, M, V = map(int, input().split())
graph = defaultdict(list)

# 간선 정보 입력
for _ in range(M):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)  # 무방향 그래프이므로 양쪽에 간선 추가

# DFS와 BFS 탐색 결과
visited_dfs = []
dfs(graph, V, visited_dfs)
visited_bfs = bfs(graph, V)

# 출력
print(" ".join(map(str, visited_dfs)))  # DFS 결과 출력
print(" ".join(map(str, visited_bfs)))  # BFS 결과 출력
